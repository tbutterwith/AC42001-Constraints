language ESSENCE' 1.0

$ to compile: 
$java -ea -jar savilerow.jar -in-eprime basic_dice.eprime -in-param basic_dice.param -run-minion minion.exe
$ once minion file has been built, go into minion file and delete static variable and value order then run: minion -varorder sdf <filename> to evaluate variable ordering patterns
$ once a solution has been found through savilrow, go into the .minion file and change the order of VAR and/or VALORDER 

given n : int
given max : int
letting values be domain int(1..max)

find D1 : matrix indexed by [int(1..n)] of values
find D2 : matrix indexed by [int(1..n)] of values
find D3 : matrix indexed by [int(1..n)] of values

such that
	D1[1] = D1[2],
	D1[3] = D1[4],
	D1[5] = D1[6],
	$ change between these methods to evaluate reformulate Constraints
	$allDiff([D3[1], D3[3], D3[5]]),
	gacalldiff([D3[1], D3[3], D3[5]]),
	
    D2[1] = D2[2],
	D2[3] = D2[4],
	D2[5] = D2[6],
	$ change between these methods to evaluate reformulate Constraints
	$allDiff([D3[1], D3[3], D3[5]]),
	gacalldiff([D3[1], D3[3], D3[5]]),
	
	D3[1] = D3[2],
	D3[3] = D3[4],
	D3[5] = D3[6],
	$ change between these methods to evaluate reformulate Constraints
	$allDiff([D3[1], D3[3], D3[5]]),
	gacalldiff([D3[1], D3[3], D3[5]]),

	D1[1] > D2[1],
	D1[5] > D2[5] ->
		D1[3] < D1[5] /\ D1[3] > D1[1], $ implied constraint

	D2[3] > D3[3],
	D2[5] > D3[5] ->
		D2[3] < D2[5] /\ D2[3] > D2[1], $ implied constraint

	D3[1] > D1[1],
	D3[3] > D1[3] ->
		D3[3] < D3[5] /\ D3[3] > D3[1]  $ implied constraint

	$eliminate symmetry
	D1[1] < D1[3],
	D1[3] < D1[5],
	D2[1] < D2[3],
	D2[3] < D2[5],
	D3[1] < D3[3],
	D3[3] < D3[5]