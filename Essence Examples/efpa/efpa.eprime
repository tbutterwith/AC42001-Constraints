language ESSENCE' 1.0
$ Equidistant Frequency Permutation Arrays.
$ Details available from CP paper. 

given d              : int(1..)        $ aka d, the hamming distance between all pairs of words.
given lam            : int(1..)        $ aka lambda, the number of each symbol in a word.
given q              : int(1..)        $ aka q, the number of symbols.
given numCodeWords   : int(1..)        $ aka v
 

letting wordLength be lam*q

find c : matrix indexed by [int(0..numCodeWords-1), int(0..wordLength-1)] of int(0..q-1)

such that

$ each codeword must contain each symbol lambda times. 

forAll row : int(0..numCodeWords-1) .  
    gcc( c[row,..], [ i | i : int(0..q-1)], [ lam | i : int(0..q-1)] ),
    
    

$ each pair of codewords must differ in exactly d places.

forAll row1,row2 : int(0..numCodeWords-1).
    (row1 < row2) => (
        (sum i : int(0..wordLength-1) . (c[row1,i]!=c[row2,i])) = d),

forAll row : int(0..numCodeWords-2).
    c[row,..] <lex c[row+1,..],

forAll col : int(0..wordLength-2).
    c[..,col] <=lex c[..,col+1],
    

true
