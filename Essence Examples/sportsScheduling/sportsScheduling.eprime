$ Sports Scheduling
language ESSENCE' 1.0
given      n : int

letting numpairs be (n*(n-1))/2
given values: matrix indexed by [int(1..numpairs), int(1..3)] of int(1..numpairs)
letting    TEAMS be domain int(1..n)
letting    GAMES be domain int(1..numpairs)
letting    WEEKS be domain int(1..n-1)
letting    PERIODS be domain int(1..n/2)
letting    HOMEAWAY be domain int(1..2)
find       schedule: matrix indexed by [ WEEKS, PERIODS, HOMEAWAY ] of TEAMS
find       game : matrix indexed by [ WEEKS, PERIODS ] of GAMES

find caps : matrix indexed by [ PERIODS, TEAMS ] of int(0..2)

such that  
           $ All teams play once a week
           forAll w : WEEKS .
             allDiff(flatten(schedule[w,..,..])),
   
           $ Every team plays at most twice in the same period
           forAll p : PERIODS .
             gcc(flatten(schedule[..,p,..]), [i | i : int(1..n)], [ caps[p,i] | i : int(1..n)]),
             
           $ Distinct games via alldiff on game array
           allDiff(flatten(game)),

           $ Channelling between schedule and game
           $ (assumes home/away symmetry broken)
           forAll w : WEEKS .
             forAll p : PERIODS .
               table([schedule[w,p,1], schedule[w,p,2], game[w,p]],
                     values),

           $ Symmetry breaking: home < away
           forAll w : WEEKS .
             forAll p : PERIODS .
               schedule[w,p,1] < schedule[w,p,2],

           $ Symmetry breaking: weeks
           forAll w : int(1..n-2) .
             flatten(schedule[w,..,..]) <=lex flatten(schedule[w+1,..,..]),

           $ Symmetry breaking: periods
           forAll p : int(1..n/2-1) .
             flatten(schedule[..,p,..]) <=lex flatten(schedule[..,p+1,..])
